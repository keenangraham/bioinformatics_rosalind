#test that input provided by Rosalind gives correct answer

#input and output are either taken from the example problem on the
#Rosalind problem page (to make the tests run as fast as possible) or
#from the actual question generated by Rosalind to pass to the next level

import unittest
import solve

class SolveTests(unittest.TestCase):
    #p.1
    def test_nucleotide_count(self):
        seq = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'
        self.assertEqual(solve.nucleotide_count(seq), (20, 12, 17, 21))
        
    #p.2 
    def test_dna_to_rna(self):
        dna = 'TCTCACGAGCCCGCGATATATGGCAATCACCCCTGGCGTCACGGGGGGCAGTACATTCGCTGAGACGACCGTAGAGCTATACTAAAAGTCGTAGCTTTGTTTAGATCCTTAGAAACCACGTCACTGAAGCCGCCTTCGGCGCGTGGACGTCGGTCAAGTCATTATATGGATAGTGCGTTGGTGTAAAACGCCGCAACACTAATTAGTATGATAGAGTTAACACAGACGCACCGACCTCTTTATCCAAGGCAGGCATTCAGACGAAAGCGTGCCAGAAAGCGGAAGTCTCGGAGCGCCTCGTTCTGCATTTTTTGGCGAACGTCGAGCTCCGGAGTCCGGGGTTTCATCTACGGAGCCTGTCTCATGGGTGTAAGCCTGTTCAGTAATCTCCGACTGGCGACCTCCCGTTTAAACGGCACTTATGAATGTTCCTGCTCATTAGCCTTTGCATAAGCTTAATTTACGCACGAGTACACCTTGTAAGCATGTCTGCACTTCCCAATGTCCCCGCTCCGGATTGGAAGGGAGGTTCTATCTTTACGAGACTGGTGTGCCGCATTTCCTGTCCAGCTTGAGGGACCTCCGCGGGGGCGCCCCTATTTAATGTGAGGACTTATAAATCGCAGGGACTCACCAAGTACCATTACAAACACTACACGCTCGGCCATATTGCGTCGCCGGACACTACCGGCAGACCGAAATTCCTTTGTTGCCGCACCAGGGTTCTGAGGTTTATATACCGTTCGCCCTTGAACAACCCGGGACCAATGGGTAGTGACGATGAGGAGTTGCGTAAGGGCAAGTTATGCTTTTCTGAAGTATAAACTCAACTAGGTCGACAGATGCAAGGTGTGCGAAAAAAACCAACTAGTTATTTGTCCCCTAGAGTGGTGTTGGAAAGCCGAGGGGCACATATTCATGTAAGGGGGGACCGCTTACTAGCCCGATTGGTCCCTCACCCGGTGTAAAACGGCT'
        rna = 'UCUCACGAGCCCGCGAUAUAUGGCAAUCACCCCUGGCGUCACGGGGGGCAGUACAUUCGCUGAGACGACCGUAGAGCUAUACUAAAAGUCGUAGCUUUGUUUAGAUCCUUAGAAACCACGUCACUGAAGCCGCCUUCGGCGCGUGGACGUCGGUCAAGUCAUUAUAUGGAUAGUGCGUUGGUGUAAAACGCCGCAACACUAAUUAGUAUGAUAGAGUUAACACAGACGCACCGACCUCUUUAUCCAAGGCAGGCAUUCAGACGAAAGCGUGCCAGAAAGCGGAAGUCUCGGAGCGCCUCGUUCUGCAUUUUUUGGCGAACGUCGAGCUCCGGAGUCCGGGGUUUCAUCUACGGAGCCUGUCUCAUGGGUGUAAGCCUGUUCAGUAAUCUCCGACUGGCGACCUCCCGUUUAAACGGCACUUAUGAAUGUUCCUGCUCAUUAGCCUUUGCAUAAGCUUAAUUUACGCACGAGUACACCUUGUAAGCAUGUCUGCACUUCCCAAUGUCCCCGCUCCGGAUUGGAAGGGAGGUUCUAUCUUUACGAGACUGGUGUGCCGCAUUUCCUGUCCAGCUUGAGGGACCUCCGCGGGGGCGCCCCUAUUUAAUGUGAGGACUUAUAAAUCGCAGGGACUCACCAAGUACCAUUACAAACACUACACGCUCGGCCAUAUUGCGUCGCCGGACACUACCGGCAGACCGAAAUUCCUUUGUUGCCGCACCAGGGUUCUGAGGUUUAUAUACCGUUCGCCCUUGAACAACCCGGGACCAAUGGGUAGUGACGAUGAGGAGUUGCGUAAGGGCAAGUUAUGCUUUUCUGAAGUAUAAACUCAACUAGGUCGACAGAUGCAAGGUGUGCGAAAAAAACCAACUAGUUAUUUGUCCCCUAGAGUGGUGUUGGAAAGCCGAGGGGCACAUAUUCAUGUAAGGGGGGACCGCUUACUAGCCCGAUUGGUCCCUCACCCGGUGUAAAACGGCU'
        self.assertEqual(solve.dna_to_rna(dna), rna)

    #p.3
    def test_reverse_complement_dna(self):
        dna = 'ACGTTACAGGTAATGGCGTCCCAGGCGATCTCGGACGTAATTTTCATTAACACCTCGTGGGCAAACCTGTAGACGGCCATTAGACCGTTATTTCATCTAACTGGTGGGTTACCGAGACGCGAATCCTAGATTAACGGTCTTGGTCGTCCGGTTAGGATGGCATGCCAGTCCGAATAACCCTTTTTATAGGCCAAGATATTCCGTTTAAACATGTTATACTTAGACGCGTTGCAGTGGTTTAGAGGAAGTTACTCGCTCCCAATCTCCATCCTTGCGCGGCCGGGCTGACGCGGGGCGAGCACCCCAAGCTAGCAAAGCGCCTAGTACCTGTTAGGTCAAAGAAAGAGGCAACCACGACATCACCCTTTAACTGTTATCCCAGATCCCTAAGCGACTTCTCGATTTCAAAATTATAGACGGATGATGCAATAATTGGTCAGGGCTTCGGACAATCAAAAATGTGTGTCGTCTCCTATACTGAGACATTAGTTAATAGGCCTAGCGGTCATTTTGAGACGGAGTTCCCGAAAATCCGCTTGTATCACCATGAGGTCCTTCACGCTCCATAGTTCATAATTTTCCCCGTATCCATCGTCCCCGTGCCATAAGCTCACTACTGAGTCTCCCACGACAAGGGACTCACCAGGGGACTGAGATGGCATTCGAACTAGCACTGCTGTCGAATTCCCAACACAGGGTGGGGCGCCGCTAGAAAACACGATCGTCTCCTCAGACGGTACAACGATAGGTTTGACTCTGCACGTACTACACCCGATAACTAACTGATGCTGTTGTTCACTGGCTCCCCGTAACGATTGTCCTTGCAATTGTTTACTGGCCGGCTGTAGGTTGACGGTCGAAACACAAGGTTAAAACTCGCGTTGTGGTGCCGCCATATCACATGTCCAGAGCCGAC'
        reverse = 'GTCGGCTCTGGACATGTGATATGGCGGCACCACAACGCGAGTTTTAACCTTGTGTTTCGACCGTCAACCTACAGCCGGCCAGTAAACAATTGCAAGGACAATCGTTACGGGGAGCCAGTGAACAACAGCATCAGTTAGTTATCGGGTGTAGTACGTGCAGAGTCAAACCTATCGTTGTACCGTCTGAGGAGACGATCGTGTTTTCTAGCGGCGCCCCACCCTGTGTTGGGAATTCGACAGCAGTGCTAGTTCGAATGCCATCTCAGTCCCCTGGTGAGTCCCTTGTCGTGGGAGACTCAGTAGTGAGCTTATGGCACGGGGACGATGGATACGGGGAAAATTATGAACTATGGAGCGTGAAGGACCTCATGGTGATACAAGCGGATTTTCGGGAACTCCGTCTCAAAATGACCGCTAGGCCTATTAACTAATGTCTCAGTATAGGAGACGACACACATTTTTGATTGTCCGAAGCCCTGACCAATTATTGCATCATCCGTCTATAATTTTGAAATCGAGAAGTCGCTTAGGGATCTGGGATAACAGTTAAAGGGTGATGTCGTGGTTGCCTCTTTCTTTGACCTAACAGGTACTAGGCGCTTTGCTAGCTTGGGGTGCTCGCCCCGCGTCAGCCCGGCCGCGCAAGGATGGAGATTGGGAGCGAGTAACTTCCTCTAAACCACTGCAACGCGTCTAAGTATAACATGTTTAAACGGAATATCTTGGCCTATAAAAAGGGTTATTCGGACTGGCATGCCATCCTAACCGGACGACCAAGACCGTTAATCTAGGATTCGCGTCTCGGTAACCCACCAGTTAGATGAAATAACGGTCTAATGGCCGTCTACAGGTTTGCCCACGAGGTGTTAATGAAAATTACGTCCGAGATCGCCTGGGACGCCATTACCTGTAACGT'
        self.assertEqual(solve.reverse_complement_dna(dna), reverse)

    #p.4
    def test_fibonacci_rabbits(self):
        months, litter_size = 32, 3
        mature_rabbits = 108412748857
        self.assertEqual(solve.fibonacci_rabbits(months, litter_size), mature_rabbits)

    #p.5
    def test_find_gc_content(self):
        seq = '>Rosalind_0783CCGTGCCCCCCACAAAGGTTTGAACCCGGCCACTTGCCACGCAGGTCCCAATACGGAATCTGCATTGGAAAGGCACTGGAGCGATGACACTAAATTGTAAATGGCTCACGCATCTAGTTAACAGAACCTTGGCGTGATAGGTTTATGTCGCCCCTTTTGTGCGGTGCGGAGTAGTTGAGCCCACAACCGCGTTTCTGAGTCCGCCTAAGTGGCATTGGTTAGACCGATCAGACTGCAGTGAGTACGAGGTATCGTGGATTATGTCCGTATCGTCACAGCTTGAATGCAAATTAGATTACCTATCCCCTCAGACCAAAGTGATTCGGCTATGCAACAATTGTCCGGACCAGCTGACAAACTCGGCCCCACTTGAACGAAATGGGGAACTGTTTCGCGCAACTTGCTCACATAGAAGACACGCCCGTGCAAGCGCGAAAGCTCTATGATCCTAAGCAAATACCAAACGTTCTGATTGTAGTGGCCGATACCAATGGATGGGCATCACTCATGTTGACCGCACAAAATTTGTTTTCTTTAATTGGACATCTACTCTTAAACCGCCGGAGCTGCTCTTCTTTCAGTGCTTTGACGGTGCGCGTGTGTCTGAGTCCAGATACGTGAACTCTGTATGAGGAAAAAATAAAGCCGCAGTAGGTCGAGTTCCGACATAGGCTTCCCCGTATTCAGTGCCGGACTCCCCGAGCAGGATGGGGGAACGCCTTTCCTAAGCTAAACCTATTTTCCACTCGGTTTCCTCACCATGCTGCTCGGTATCCGTCGTCAAACTAGGTTAATGAATAGTTCCAGTGACTGGTGCTCCCAGTTCGATGTAGCTTATGGTTGGGCGGAGTTGAAACTCAGAATTTTTCGGG>Rosalind_6965GCGGAAAACGGTACCAGTCTTTCTATCTGGCACGTTCACCAGAGCCGTTTTGGCATGTACAGATATCAAAAAGCTGCCCGACACCCGCGGGGGTTGCAAGACCCCCAACAATTTGTACCCCTCGGAGCGATTGGCCGGTAGGACCCTCGTTCTGAGGTATTGTACACCGCCCTTATCGGCCGGCTTATCGGTATCGCTTCACAATTAACTCGGAAATGAGATATTCTAATTTAAACAGAATACATTATGAGTTGCGGACGTGTTTTCAAACAGTTCTACGTGTTCCCTATGTCGGTCTGCCAGTATAGTGGGATGCACAAGAGTCGGCCGGACGGTTTCCATGTGAATCTCTAAGGGAGACCTGAACGGACAACCGGGCATGCTAAATGTGAAAGTCAAAACCATGTAGCGTGCCCGTAGCCCGTACTATGCGTCGATTTCGGTCGCTGACGGGGTTGATTAATCCCATATAGGATGGTGCGAGAGGCGCTCGCGCCGTCCTATTCACGAGCGTATCGGTGTTCTCGCCTGCCCTCCTGCATCTCAGCCCGTGTATAAATCATGTCGGGGGCACTCAAAGTACTGGACGAACTAATTCGCGGGTCCCACACCTAACGTATAATCCCGGGTCAATTGTTCACTTGTCGCCCACACGCGATGTGCAGATCACGTGTCCTTCTCCTTTAACATTGGAACTGAACAGCGGTGTGTCTGGTTGTGTCGTTACGGTTTATCATGAAATTTAAGATTGGAGCTCCGGGCCTGTAATGGGCAAGCGACTGGGACTTTTCAAGAGATGATCCCACATGAGTGGTTCTTTTGAAGACGTGCGAGCCGCTGATTCCCATGCGTCGCAGCGCGCCTGGCAAGGAGCCGATAATCAGTTGTAGCACTGTGAGCATTGACTGGCACCCCGTGTGGAATGGTGTTCCAATACGGTTCAGCAACT>Rosalind_2659TACAGTACGTCCTATAAATATGACCTCAGCGCATTTTTACGACTCGGTTGTATGTCACGAAGATGGCGTGATTACACTCGCATGAAGATTACAATGGAGTTGGTTAGGCATGTGACTTATGGGTCCCGAGGCTGGCATCTAGTACATCATCTCAAAGCCTCCGCTGCCTGTACAACAAGTCGGCAGGTCCTTGTCTCTGAATTCGGCGAAGCTAGGGTTGCTTAAAGGTGGTAATACCTGATCACCTCACCACGCCATTCCCTCAAATGTGATTGCTACGGGCCCGCATAATTGGTAGCTCATTTCAATTTAACCTCGAGTCAGTGAACATTGAATATATGGCATTGAGGCCAGCAGGTCTGTCACTCGAGCACATCCCGAGTTAATCATCATTGGGTGGGTGGTTTCGTGACATTTATGGGCCAGATTTCTGAAATCAATGATCTCACTTTTGCATGACCTAGTCGTTGCGCTTCCTCGGAAGGTCTGTGGTACAGCGCCGCCTAGTTGTTGAGTAGCCGGAACTCTTCGCCACTTCCGTGCCCCGTTTGATGGACCCGCACGTGATTCTATGAGTCATTCGATAGCGCATCTAATCACCTCGGCGAGTGACGGGTGTAGTCTCTATGTCCGAGAGTAAGCTCTCGCAAACAAGGAGTTTGGCGTAGGTCTAAGACGCTGCCTGTTGCATCGCAAACCCTACGACCACCTGCTACTGACTGAGAGCCAATCGGAGTTACTGGGATTAAGTGACCTCTTGATAGGCTTATTATTTGGTCGCGACTTATAAACACGCAGGTTGGCCCATCCGGAGCGACGCTGCACGTGAGACATTGCGAAGGGCATGGTGACCTGTAGACTACCATCGAGTCTCCTGGTGCTCACGCCGGCCCCCCGGCGATCACTGTCTCTGTCCCCATTTGTTACTCCACATTACGCGATAGTATTCCTCGCGAGGACAGAGCATGACCTTAGATCCGAGGATTGACATGTG>Rosalind_8693AGCGATCTGACCATCGTAATGCACCCGGGCATCAATTGTTGCTGCACCACATTTACGATAAGTCCACGGCCAGTGGATAATGTGTTTGCAAACGCCGGGTTCCAGAGTTAGACATCTGAAAACCAATAGTTTCTTTCGTCACGGATTAGTAGGGTCATAGGTACTAGCCCAGTAAACCGGGGTGCTTAAACACTCGTCGAAACCGCCGGTCGCAGACTTCGTCTTGGCCCCAAAAATCGGATTACACGCTTGTACGAGTGCAGCCCAAAAAATATCCCTCCATGGCAGGATGGTGCGGATTAACTGGCGATCGAACATCTTGTCTCCTCTCTATTTTGCATAACGAAGCAAGACCGGAGGACACAAATCAGTTTCGCGCAGTTGCCTCCACAACGCAGCTCTGCTGTCACTTTATCCGCCTACGCACATGCGGAGAGTGACATCGATCGACAGCACCATTTGGCAAGGATAACCAAGTTAGAATAGTTTGATCTGATGTACTTCGGTAGATCTGCGTCCTGAAGCCCAAGGCAGGTTGGAGGTTATAGAGAAAGTCGAAAATACTACTAGGGCTGTCGATACAGTCTACTGACTACCGCTATATGGCTGACTAGAGGCGTAGCAGGAGTGGGGACGGCCATCTTTCAGGTACGTAACCTTCCTATAGCATAGCCGCCACGTAAAACGTCATCACTCTGCTGCCTTAAACACATTTGAGACACAGGTATGCATGGGTAGTACATCCGGGAGCAGATCTGATAGCGTTGACGGCAGTTGCACACCTTCAATCCGCTAAGAGTAAAAATAGGTTTGCCGTAAGTGACCCTCGACTCCATCATGTATTTCAAACGAGGGGAGTTTACGCCCCGGC>Rosalind_7571ATATTTACGCTGATCTTTACTAGGAAACCTTGACTCCACGCACTACGGCCATTTGAGGCGTAATTTAGTCAAGCTCTGCGTAAAACGCTTGACTGTAGCTTTTAGGCGGCAGACACGCTCCTCGGACCCGGACGCTGAGCGGGTTCCCGTACCTTGGGACCCAAATTAGTGAGAGCGCATATGAGCTGTAGGGATACTCGCCATCAGGGCGAGACTGTGCAGCAGCTAACCATTACTTCGGCGCGATTGGCTGCGAATGATAATCACCAGCTAAATTTAGTATTTTAATGGACTACAACTACTCCACATGGCTGAACGGCATGTCAAACTGACTGGAACCGCTAAGACGACTTGCGGGACATGGTTGTTTAATTGCAACAAGCGGAGCATAGGCGACGCTAGGTTGCCAACTTACTTTCACGTCTAAACATTGCCAACTCGAGAGATCGCCAAATAGTATTATGACTATGACGTGTGTTCGGTAGAGTCTAGACGCCTGTAATTGGGACTGGATACCGTCCAATACGCGACGGGCATAGTGTTGTGAGGGTTCGTGCAGTGCTGCAATTGTCCAGCACACCAGGTTAATGCCAACACGTTAATCATGAAGAAGGTACTTTCCTCTTAGTCCCACATGCCCTACGCGATTCAACCACTCCACCCCCGCTAGTACTGTCGACTTCCTTTACACTATAGGATCGGGCTAGAGCCACATTTTGCATTTACTGGAAGATGGCGGCTATATAGGAGTGCCTGACAGGGGCGAAAGACGGTCGGCCGTTCTGCTTGTCTAACGTTAGTAACAGGCGCCGTAGTTAGTCAACACCAAGTAGTCAAATGAAATAGTTCACTAGTGGTGGCAGGAACAGTGCACTGTTATACGCCTGACCCTTGATCATTCGGATGATTTCATGATTGTGCATCGATCTCGAGTAGGGACAACTGGGGCATACAAGAACGTTGCCCAGCCGGTCACATGCAGA>Rosalind_6946AAGTTCGTTCTATCGTTTCAAGACGGATCGTGTGTACCTACATGGTCCTCCCGCGGCGCGAGGATGTAGTTTCGCAGAGTACCCTACCAACGCGCACCAACACTTGTCGGAATGTCTTCATAGGACCGCCAGCTTGTCTTGAAGGGCTAAACCTTCGCGAACACTAGGACCCGCAATGTCTGGGTAAAGCTGGCCCATCTCTTGTAAGGTTTAAGTTTCGTGTCAGGATGAGACAAACACCGAAATCAAGCGCACAGTAGCTCGTCACAAAGGACTCCTCATAACGGAAATTAAGTCGCAAAAGAATCAGTGATAAAACTAGTCATCCGAATTTCCGACGTCCTTAACCTTGGTCCTAGGACACATCGGTTAGTGTCAGCTTCCCGATAAAGCGGATCGTGAATTCGTGACTGAGAGACGATACTAGCAAGGCTCTCCCCAAAGGGTTCGCCCATCCAATAGGCTGGCAGAAGCTGGTGAGCGAATAGCAACAGTCTGTATGCCAGCGCGTTTGCGATGTCCCGCGGGTCAGATTCGTCCTGGCCAATGCGGCCCCCGCCTGTGCGTCCCGTATTACCTACTCCTTACCTCCTAGGGGTGTAATTGGAGCACCCCTCGACTATGGCAATCCAACCATGACGTGTTAAGCGTTCCTATTCTTAAGAAACGGCAGTCTGGGTTCCTGATGGAAGTATGACAGTGCGACTGGCGCTCCATCCCGTGTTAAAAAGCCCGCACGCGTTGGTTCTCCGTTCGAAAGTTCTATTAGGGGCTCCGGCTAGACGCGATTTAGCCGTAGGACCAGTCTGTCCACGAATCTTCACGCAGGGCTCTGTACTCATAACCCACGTGTGAACCACTCTGTTATGAATATTAAC>Rosalind_5156GTGATGCGCTCGACTCGCCGATCAGTGGCAGCCGAGAAACAAGCTTCCCCTTCCAGTCGTCTAAGGTCACAGGAAACCGTGTAACTGTCGGCGCTCCTAAGTACCGCATGTGATTTCACCGCGAGGGGCACAAGAACCCTTCGGAGAGGACATCCCCACATTCAGCTTCAGTGGGGAAGGATTTCTAAGGGTGAGGTGTAGGCATAATACTAATGAAGCTACTGCGCACGTCGCGGCGATCTATCTCTAAAGATTCCTTGCATAAGACGCTCGTTGCGCTACGACCCTATAAGGGTGTAAATGCTAGAGTCGTCACAAGCTGTAACCGCCGGGCTCGCTAGCGTCTCATGACATGCCTAGCGGTGCTAACCCATTTGGTGATCTATACGAATCCTCAACGGTCCCACCATAAGTAAAAGCCCACGTAGGAGAAGACTCTTTTGAGTCGTACTTGCAATCAGTTGGTGCGCAATTAATCACTACTTTGACAAGGGACGTGGTGGGCTAACCCACAACTTCGATGTCTTATGATAAAAGTAAGCATTCGCGAAACGCGTACAGAAGAGCTCGTTCTGTGACGAAGTTCCGGTCCATCCGATTGATGCTACCTGTCTTATCTAGTCAGCCGCCGTCTTAATTTCTCCCTCTACATATCTGAAAACCCTAGGAGTACGACATCCAAGAAAATAGCCGCGCAATTCCTAGCTCTTACTCGCATTCGAGGACATTGGTTCCGACGCCATACGAAAATCAATTTAGGATCATATATTATATATGATCTATTGCTCCGTCCCGATATACCATTAACCAGGTTCCAAACCGCACGTAAGGTGCTTGTGGCACCAATAATTAAACTACTACGATTCGCTATCTACCCGGTAACTAGTTCATTGTATTTACTGATCAATAGCCGATTATTCGGGGTAAGTACACAGGGGCGCACAACGGCTGC'
        gc = 'Rosalind_6965 51.633298208640674'
        self.assertEqual(solve.find_gc_content(seq), gc)

    #p.6
    def test_find_hamming_distance(self):
        first, second = 'GAGCCTACTAACGGGAT', 'CATCGTAATGACGGCCT'
        score = 7
        self.assertEqual(solve.find_hamming_distance(first, second), score)

    #p.7
    def test_proba_dominant_allele(self):
        homozygous_dominant, heterozygous, homozygous_recessive = 2, 2, 2
        proba = 0.78333
        self.assertAlmostEqual(solve.proba_dominant_allele(homozygous_dominant, heterozygous, homozygous_recessive), proba, 5)

    #p.8
    def test_rna_to_protein(self):
        rna = 'AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'
        protein = 'MAMAPRTEINSTRING'
        self.assertEqual(solve.rna_to_protein(rna), protein)

    #p.9
    def test_find_motif(self):
        seq, subseq = 'GATATATGCATATACTT', 'ATAT'
        index_list = [2, 4, 10]
        self.assertEqual(solve.find_motif(seq, subseq), index_list)

    #p.10
    def test_find_profile(self):
        sequences = '>Rosalind_1ATCCAGCT>Rosalind_2GGGCAACT>Rosalind_3ATGGATCT>Rosalind_4AAGCAACC>Rosalind_5TTGGAACT>Rosalind_6ATGCCATT>Rosalind_7ATGGCACT'
        profile = ('ATGCAACT', {'A': '5 1 0 0 5 5 0 0', 'T': '1 5 0 0 0 1 1 6', 'C': '0 0 1 4 2 0 6 1', 'G': '1 1 6 3 0 1 0 0'})
        self.assertEqual(solve.find_profile(sequences, test=True), profile)

    #p.11
    def test_mortal_rabbits(self):
        months, life_span = 6, 3
        number_rabbits = 4
        self.assertEqual(solve.mortal_rabbits(months, life_span), number_rabbits)

    #p.12
    def test_overlap_graphs(self):
        sequences = '>Rosalind_0498AAATAAA>Rosalind_2391AAATTTT>Rosalind_2323TTTTCCC>Rosalind_0442AAATCCC>Rosalind_5013GGGTGGG'
        overlaps = ['Rosalind_0498 Rosalind_2391', 'Rosalind_2391 Rosalind_2323', 'Rosalind_0498 Rosalind_0442']
        self.assertEqual(solve.overlap_graphs(sequences), overlaps)

    #p.13
    def expected_offspring(self):
        genotype_population = '1 0 0 1 0 1'
        expected_value = 3.5
        self.assertEqual(solve.expected_offspring(genotype_population), expected_value)

    #p.14
    def test_shared_motif(self):
        sequences = '>Rosalind_1GATTACA>Rosalind_2TAGACCA>Rosalind_3ATACA'
        longest_motif = 'AC'
        self.assertEqual(solve.shared_motif(sequences, test=True), longest_motif)

    #p.15
    def test_calc_proba_heterozygous(self):
        pass
     
    #p.16
    def test_find_protein_motif(self):
        pass

    #p.17
    def test_protein_to_mrna(self):
        pass
     
    #p. 18
    def test_open_reading_frames(self):
        pass

    #p.19
    def test_n_permutations(self):
        pass
     
    #p.20
    def test_protein_mass(self):
        pass

    #p.21
    def test_reverse_palindrome(self):
        pass

    #p.22
    def test_rna_splicing(self):
        pass

    #p.23
    def test_lexicographic_permutations(self):
        pass

    #p.24
    def test_longest_subsequence(self):
        pass

    #p.25
    def test_shortest_superstring(self):
        pass

if __name__ == '__main__':
    unittest.main()
